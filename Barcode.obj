--track0:type,0,3,0,1
--track1:width,0,2000,500
--track2:height,0,2000,200
--track3:AF(%),0,5000,0
--check0:info,0
--dialog:data,local data={"012345678901"};color/col,local col=0x000000;back/col,local bg=0xffffff;no bg/chk,local isNoBg=0;withLetter/chk,local isWithLetter=1;font,local font="FOT-OCRB";fontsize%,local fontsize=20;
local function dump(o)
    if type(o) == "table" then
        local s = "{ "
        for k, v in pairs(o) do
            if type(k) ~= "number" then
                k = '"' .. k .. '"'
            end
            s = s .. "[" .. k .. "] = " .. dump(v) .. ","
        end
        return s .. "} "
    else
        return tostring(o)
    end
end

local function showErrorMsg(str)
    str = "Barcode.obj at layer '" .. obj.layer .. "':\n" .. str
    obj.setfont("メイリオ", 20)
    obj.load(str)
    error(str)
end

data = type(data) == "table" and data or {data}
if #data == 0 then
    showErrorMsg("dataに値を入力してください。")
end
for index, value in ipairs(data) do
    if type(data[index]) ~= "string" then
        showErrorMsg("インデックス'" .. index .. "'の要素'" .. value .. "'は無効な型です。stringを入力してください。")
    end
end

local length = data[1]:len()
local t, affect = obj.track0, obj.track3 / 100
local width, height = obj.track1, obj.track2
local types = {"JAN", "CODE39", "CODE128", "NW-7", "ITF"}
local typestr = types[t + 1]
local index, af = math.modf(affect)
index = index + 1
index = index > #data and #data or index

local B = dofile("C:\\Users\\Aodaruma\\Desktop\\aviutl_v110\\plugins\\script\\my scripts\\Barcode.lua")

local function drawRect(x, w, h)
    local cw, ch = width / 2, height / 2
    return obj.drawpoly(-cw + x, -ch, 0, -cw + x + w, -ch, 0, -cw + x + w, -ch + h, 0, -cw + x, -ch + h, 0)
end

local cacheFG, cacheBG = "cache:Aodaruma:Barcode:fg", "cache:Aodaruma:Barcode:bg"
obj.effect()
obj.load("figure", "四角形", col, 1)
obj.copybuffer(cacheFG, "obj")
obj.load("figure", "四角形", bg, 1)
obj.copybuffer(cacheBG, "obj")

-------------------------------------------------------

if not B[typestr] then
    showErrorMsg("指定されたtypeが見つかりませんでした。開発者に問い合わせてください。")
end

if obj.check0 then
    -- body
else
    if typestr == "JAN" then
        local data1 = B[typestr](data[index])
        local data2 = index + 1 > #data and data1 or B[typestr](data[index + 1])

        if data1.success and data2.success then
            if data1.datalen ~= data2.datalen then
                showErrorMsg("JAN: データの前後の桁数が違います。確認してください。")
            end

            -- width of module
            local mw = length == 12 and width / 113 or width / 81

            -- 二進数文字列から、各0/1のどれだけあるかの数への変換
            local animeL, animeR = {}, {}
            local function bar_converter(s, e)
                local result = {}
                local bar1, bar2 = {}, {}

                local now1, now2
                local count1, count2 = 1, 1
                for i = s, e do
                    local a, b = data1.bars:sub(i, i), data2.bars:sub(i, i)
                    if i == s then
                        now1, now2 = a, b
                    elseif i == e then
                        table.insert(bar1, count1)
                        table.insert(bar2, count2)
                    else
                        if a ~= now1 then
                            now1 = a
                            table.insert(bar1, count1)
                            count1 = 1
                        else
                            count1 = count1 + 1
                        end

                        if b ~= now2 then
                            now2 = b
                            table.insert(bar2, count2)
                            count2 = 1
                        else
                            count2 = count2 + 1
                        end
                    end
                end
                print("bar1: " .. data1.bars:sub(s, e) .. ", " .. dump(bar1))
                print("bar2: " .. data2.bars:sub(s, e) .. ", " .. dump(bar2))
                -- if #bar1 ~= #bar2 then
                --     showErrorMsg("bar1とbar2の数が合いません: bar1=" .. #bar1 .. "; bar2=" .. #bar2 .. ";")
                -- end
                local sum = 0
                for i = 1, math.max(#bar1, #bar2) do
                    if i > #bar1 then
                        table.insert(result, (bar2[i] - 0) * af + 0)
                    elseif i > #bar2 then
                        table.insert(result, (0 - bar1[i]) * af + bar1[i])
                    else
                        table.insert(result, (bar2[i] - bar1[i]) * af + bar1[i])
                    end
                    -- table.insert(result, bar2[i])
                    -- sum = sum + result[i]
                end
                -- if sum ~= 7 * 6 * 2 then
                --     showErrorMsg("sumが違います:" .. sum)
                -- end
                return result
            end
            animeL = bar_converter(1, #data1.bars / 2)
            animeR = bar_converter(#data1.bars / 2 + 1, #data1.bars)

            -- 描画
            obj.setoption("dst", "tmp", width, height)
            obj.copybuffer("obj", cacheFG)
            -- obj.load("figure", "四角形", 0x000000, 1)
            if length == 12 then
                drawRect(mw * (11), mw, height)
                drawRect(mw * (13), mw, height)
                -- print("proceed!")
                local sum = 14
                for i, v in ipairs(animeL) do
                    if i % 2 == 0 then
                        drawRect(mw * sum, mw * v, height)
                    end
                    sum = sum + v
                end
                drawRect(mw * (sum + 1), mw, height)
                sum = sum + 5

                for i, v in ipairs(animeR) do
                    if i % 2 == 0 then
                        drawRect(mw * sum, mw * v, height)
                    end
                    sum = sum + v
                end

                drawRect(mw * (sum + 1), mw, height)
                drawRect(mw * (sum + 3), mw, height)

                obj.setfont(font, font_size)
            else
            end
            obj.setoption("dst", "frm")
            obj.load("tempbuffer")
        else
            if not data1.success then
                showErrorMsg(data1.message)
            else
                showErrorMsg(data2.message)
            end
        end
    end
end
