フルに使うにはrikky_module.dllが必要です
blend_core_r.dllとrikky_module.dllはpluginsフォルダまたはscriptフォルダに移動させてください
blend_core_r.dllは2種類あります
並列DLLと非並列DLLという2種類があります
並列DLLに入っているblend_core_r.dllの方が処理が早いですが、万が一お使いのパソコンで使えない場合は
非並列DLLに入っているblend_core_r.dllを使ってください
libgcc_s_dw2-1.dllとpthreadGC2.dllはaviutl.exeがある階層に移動してください


合成モードの種類は以下のようになっています
ただし、計算方法の差異などある場合もあります
01:加算
02:減算
03:乗算
04:除算
05:スクリーン
06:オーバーレイ
07:オーバーレイ(gimp)
08:比較(明)
09:比較(暗)
10:色差
11:陰影(焼き込み(リニア))
12:明暗(リニアライト)
13:明暗(逆)
14:差分
15:除外
16:ネガ
17:反転
18:カラー比較(明)
19:カラー比較(暗)
20:覆い焼き(カラー)
21:覆い焼き(逆カラー)
22:覆い焼き(ソフト)
23:焼き込み(カラー)
24:焼き込み(逆カラー)
25:焼き込み(ソフト)
26:ハードライト
27:ソフトライト
28:ソフトライト(gimp)
29:ソフトライト(photoshop)
30:ビビッドライト
31:ビビッドライト(photoshop)
32:ピンライト
33:ピンライト(逆)
34:ピンライト(強)
35:ハードミックス
36:色相
37:色相(HSVL)
38:色相(δ)
39:カラー(明度)
40:カラー(輝度)
41:カラー(HSVL)
42:彩度(明度)
43:彩度(輝度)
44:彩度(HSVL)
45:明度
46:輝度
47:輝度(HSVL)
48:RED
49:GREEN
50:BLUE
51:YELLOW
52:AQUA
53:MAGENTA
54:相加平均
55:相乗平均
56:調和平均
57:反射
58:グロー
59:寒色
60:暖色
61:微粒取り出し
62:微粒結合
63:フェニックス
64:AND
65:OR
66:XOR
67:SHIFT
68:加算(unsigned)
69:減算(unsigned)
70:加算(RED)
71:加算(GREEN)
72:加算(BLUE)
73:加算(RED-GREEN)
74:加算(GREEN-BLUE)
75:加算(BLUE-RED)
76:二値化
77:オリジナル合成
色相とカラーと彩度の違いはHSVかHSLかの違いで、(HSVL)はHSVとHSLを合わせたようなものです
どういう効果があるのかは各自調べてください
64以降は実験的なものなので、実用性はほぼないです
77番目のオリジナル合成は番号を直接指定するのではなく、関数を渡します
blend=function(r1,g1,b1,r2,g2,b2)
	local r=r1+r2
	local g=g1+g2
	local b=b1+b2
	return r,g,b
end
r1,g1,b1は合成するオブジェクトのカラーで
r2,g2,b2は合成する背景のカラーです
引数を6つ、戻り値を3つ指定してください
出来上がった関数を渡すとオリジナル合成が可能になります

blend_core_r.draw(blend [,draw])
のように使います

blendは1から76か上記で説明した関数を指定します
drawはこれは描画も同時に行うので、X方向に100動かしたい場合は
blend_core_r.draw(blend ,{100})
のようにします
テーブルにobj.drawの引数を入れるとその通り描画されます
drawですが、obj.drawpolyの引数を渡すとobj.drawpolyとして扱うことが可能です
つまり、引数の数でobj.drawかobj.drawpolyかを判断しています
引数が8以下の場合はobj.drawで引数が12または20または21の場合はobj.drawpolyとして扱います
